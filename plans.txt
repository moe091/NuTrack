Homepage:
	-Main feature: food search
	-Right side: not logged in=[Sign up/log in] - logged in=[Meal Tracker/Planner info(cals this week/cals till goal progress bar, upcoming meals) - 
		create meal button, add meal button]
	-Top: Nav links[search, planner, tracker, meals,  right side=log in/out, register/profile]
	-Bottom: App info/features. 3-4 columns with photo at top and short text description. Click to expand column/shrink others and 'read more']
	-Footer

Search: 
	-Display search results, name and 4-5 'importantNutrients'(an array field in User model, where they can select which properties to display for food items, e.g sugar, carbs, cals,
		protein, vitamin C. Has a default setting including cals, carbs, protein, sugar). Can click on any stat at the top of table to sort by property.
	-Links: click name to view page for item. also has links for add To Meal, add to Tracker, add to Planner('add to' pages).
	-Each item has + button/checkbox that adds them to your 'current items'. current items are displayed on side of screen in a div, and have buttons for compare, add to meal/planner/	
		tracker, save to my items.
	-User model has a 'myItems' array, items in this will show up highlighted in green or blue or something on search page and be put at the top of the list.
	-
	
	
	
	Article: Callbacks with custom parameters in React:
	
	Generally, in React, any link/button handler functions that aren't inside the same component as the link or button itself exist in a parent component. Another common 'mini-pattern' in react is to use javascript's Array.map function to generate a bunch of html elements that each correspond to an array element from an array that you've pulled from the server or some API. e.g: You have a SPA website displaying movie times for different movies at a local theater, you might make an ajax call to the server to retrieve an array of movie objects, with each movie object containing the name of the movie and the showtimes and a unique id. Then, in React, you have a Movie Listings component that is supposed to display each movie in the array in the array, putting the movie title and showtimes inside of a div or something like that. Each movie div also has a button to buy tickets for that movie.
	
	Most people would probably put something like:
	
	movieArray.map((movie) => { renderMovie(movie) })
	
	somewhere in the render function of the MovieListings component. 
	
	Somewhere else in movie listings would be the renderMovie(movie) function that takes a movie object as a parameter and returns a div element containing an <h1> for the movie title, a <ul> that contains an <li> for each show time, and a <button>Buy Tickets!</button> for the movie object. Now each <button> element needs an onClick handler so that you can render the BuyTickets component. The BuyTickets component will probably require a movie to be passed in as a property so that it knows which movie it is supposed to be selling tickets for, or if not you'd at least have to set the movieID as a url parameter so that the component has some way of knowing which movie the user is trying to purchase tickets for. Rendering the BuyTickets component and passing along info about which movie the user wants to buy tickets for would obviously be handled in the onClick handler of the 'Buy Tickets' button element. Of course, there are multiple 'Buy Tickets' buttons - one for each movie, and the click handler needs to know which button was clicked so that it knows which movie the user is purchasing tickets for. 
	
	Typically, the onClick handler would exist in the parent component of the MovieListings component, because this handler function will result in the MovieListings component no longer being rendered and the BuyTickets component taking it's place - let's take a minute and look at how the Components will be organized and why it'd best to keep the onClick handler for the 'Buy Tickets' buttons in the parent component of MovieListings:
	
	
	We are assuming this is a single-page web app, There is probably a navbar at the top of the page that exists in its own component. And maybe a sidebar to the left or a column full of ads to the right - both of which would exist as their own component. Then there's the 'Main' or 'App' component - as I usually call it - taking up the center portion of the screen. This component will have all the different pages/screens of the web app as child components and will decide which one to render based on the current Route; the MovieListings component that displays all movies playing at the theater and their play times, BuyTickets copmonent, some kind of Search component that allows you to search for a movie name and displays a list of results, maybe a MovieInfo component that displays details of one specific movie and it's playtimes, etc. Using React router, it's pretty simple to render a different component based on the URL, and doing it this way allows the browsers back/forward buttons to work as they would on a traditional, non-single-page, web app. Also if the user bookmarks a URL, and clicks the bookmark later, the app will display exactly what they are expecting it to(as long as you are careful - I'll explain more about this later). 
	
	To understand this technique, all you need to know is that there is a 'Main' component, with 'MovieListings' and 'BuyTickets' as children. MovieListings is displayed when the url matches '/app/movielistings' and buyTickets is displayed when the url matches and displays a list of each movie with each item containing the movie title, all of the playtimes for the movie that day, and a 'Buy Tickets' button. BuyTickets is displayed when the url matches '/app/buytickets' and displays the name of the movie it is selling tickets for, an option to select which of the available playtimes to buy tickets for, and a 'purchase' button that takes you to some other irrelevant component to enter payment details and complete the purchase.
	
	
	
	
	Let's just set up an example situation that can be used to explain this technique. Say you have a React component called 'Main', this component occupies the main area of your single-page-web app; maybe there's a navbar at the top or a sidebar on the left, it doesn't matter though, they aren't part of this component. The main component mostly just acts as a container for its child components, it displays one child at a time depending on where in the web app the user is and decides which child copmonent to render depending on the URL(probably using something like React Router for this functionality). If the user clicks a link that says 'movie listings' in the nav bar, the links callback will update the url to 'app/movielistings' and then when the main component re-renders(which it will when the url changes) it will look at the url and choose to display the MovieListings component based on that. Then, if the user is looking at the MovieListings component and clicks the buy tickets button for a particular movie, say, Star Wars: Rogue One, it will change the url to '/app/buytickets' and then the main component will render the BuyTickets component. But how will the BuyTickets component know which movie to display? The MovieListings component will probably receive the data from an ajax call to some API, containing an array of movies containing the movie names and their display times. But the BuyTickets component needs to know which 'Buy Tickets' component was clicked, because each movie has its own button and the component needs to know which movie title to display and which movie to sell tickets for. 
	
	The 'Buy Tickets' button would be a jsx element that gets rendered by a component, the element would have an onClick property that points to a function somewhere in a component - personally I'd put the onClick callback function in the Main component, even though the element would be in a different component than its callback function I think this would help reduce coupling; the function will result in the Main component rendring its BuyTicket component instead of the MovieListing component, so I think it makes more sense to have the function that alters the functionality of the Main inside the Main component instead of one of its children.


